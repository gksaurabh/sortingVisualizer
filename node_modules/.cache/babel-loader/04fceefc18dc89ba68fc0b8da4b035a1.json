{"ast":null,"code":"var _jsxFileName = \"/Users/saurabhkishore/Desktop/Programming/Projects/SortingVisualizer/sortingVisualizer/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms.js';\n/**\n * e63946 - red\n * f1faee - off white\n * a8dadc - light blue\n * 457b9d - medium blue\n * 1d3557 - dark blue\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED = 1;\nconst SIZE = 100;\nconst PRIMARY_COLOUR = '#a8dadc';\nconst SECONDARY_COLOUR = '#e63946';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n  /**\n   * reset array to an empty array/create an empty array\n   * then itterate over 100 and add a random integer value from 5 to 1000\n   * then set state to the new array\n   */\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < SIZE; i++) {\n      array.push(randomIntFromInteraval(5, 500));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = sortingAlgorithms.getMergeSortAnimation(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementById('array-bar');\n      const isColourChange = i % 3 !== 2;\n\n      if (isColourChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOUR : PRIMARY_COLOUR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n  /**\n   * create a div for the array with the key as the index using map\n   */\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.resetArray(),\n          children: \"Generate New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.heapSort(),\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.bubbleSort(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/**\n * Return a random int from a given min and max\n */\n\nfunction randomIntFromInteraval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/*\n*   pass in a sorted array into arrOne and alogrithm applied sorted array to \n*   check if our sorting algorithm works. \n*/\n\n\nfunction arraysAreEqual(arrOne, arrTwo) {\n  if (arrOne.length !== arrTwo.length) return false;\n\n  for (let i = 0; i < arrOne.length; i++) {\n    if (arrOne[i] !== arrTwo[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["React","sortingAlgorithms","ANIMATION_SPEED","SIZE","PRIMARY_COLOUR","SECONDARY_COLOUR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInteraval","setState","mergeSort","animations","getMergeSortAnimation","length","arrayBars","document","getElementById","isColourChange","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrOne","arrTwo"],"sources":["/Users/saurabhkishore/Desktop/Programming/Projects/SortingVisualizer/sortingVisualizer/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css'\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms.js'\n\n/**\n * e63946 - red\n * f1faee - off white\n * a8dadc - light blue\n * 457b9d - medium blue\n * 1d3557 - dark blue\n */\n\nconst ANIMATION_SPEED = 1;\nconst SIZE = 100;\nconst PRIMARY_COLOUR = '#a8dadc';\nconst SECONDARY_COLOUR = '#e63946';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    /**\n     * reset array to an empty array/create an empty array\n     * then itterate over 100 and add a random integer value from 5 to 1000\n     * then set state to the new array\n     */\n    resetArray() {\n        const array = [];\n\n        for (let i = 0; i < SIZE; i++){\n            array.push(randomIntFromInteraval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = sortingAlgorithms.getMergeSortAnimation(this.state.array);\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementById('array-bar');\n            const isColourChange = i % 3 !== 2;\n\n            if (isColourChange) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOUR : PRIMARY_COLOUR;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED);\n            } else {\n                setTimeout(() =>{\n                    const [barOneIndex, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIndex].style;\n\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED);\n            }\n        }\n    }\n\n    quickSort() {\n\n    }\n\n    heapSort() {\n\n    }\n\n    bubbleSort() {\n\n    }\n\n    /**\n     * create a div for the array with the key as the index using map\n     */\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div \n                        className=\"array-bar\" \n                        key={idx} \n                        style={{height: `${value}px`}}> \n                    \n                    </div>\n                ))}\n                <div className=\"button-container\">\n                    <button onClick={() => this.resetArray()}>Generate New Array</button>\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                </div>\n                \n            </div>\n        )\n    };\n}\n\n    /**\n     * Return a random int from a given min and max\n     */\nfunction randomIntFromInteraval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/*\n*   pass in a sorted array into arrOne and alogrithm applied sorted array to \n*   check if our sorting algorithm works. \n*/\nfunction arraysAreEqual(arrOne, arrTwo) {\n\n    if(arrOne.length !== arrTwo.length) return false;\n\n    for (let i = 0; i < arrOne.length; i++){\n        if(arrOne[i] !== arrTwo[i]) return false;\n    }\n    return true;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}