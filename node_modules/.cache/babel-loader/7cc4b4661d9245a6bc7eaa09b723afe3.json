{"ast":null,"code":"export function getMergeSortAnimation(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxArr = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxArr, animations);\n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxilaryArray, animations) {\n  if (startIndex === endIndex) return; //find the mid point\n\n  const midIndex = Math.floor((startIndex + endIndex) / 2);\n  mergeSortHelper(auxilaryArray, startIndex, midIndex, mainArray, animations);\n  mergeSortHelper(auxilaryArray, midIndex + 1, endIndex, mainArray, animations);\n  doMerge(mainArray, startIndex, midIndex, endIndex, auxilaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIndex, midIndex, endIndex, auxilaryArray, animations) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = midIndex + 1;\n\n  while (i <= midIndex && j <= endIndex) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxilaryArray[i] <= auxilaryArray[j]) {\n      animations.push([k, auxilaryArray[i]]);\n      mainArray[k++] = auxilaryArray[j++];\n    }\n  }\n\n  while (i <= midIndex) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxilaryArray[i]]);\n    mainArray[k++] = auxilaryArray[i++];\n  }\n\n  while (j <= endIndex) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    animations.push([k, auxilaryArray[i]]);\n    mainArray[k++] = auxilaryArray[j++];\n  }\n}","map":{"version":3,"names":["getMergeSortAnimation","array","animations","length","auxArr","slice","mergeSortHelper","mainArray","startIndex","endIndex","auxilaryArray","midIndex","Math","floor","doMerge","k","i","j","push"],"sources":["/Users/saurabhkishore/Desktop/Programming/Projects/SortingVisualizer/sortingVisualizer/sorting-visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["export function getMergeSortAnimation(array){\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxArr = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxArr, animations);\n    \n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxilaryArray, animations) {\n    if(startIndex === endIndex) return;\n\n    //find the mid point\n    const midIndex = Math.floor((startIndex+endIndex) / 2);\n\n    mergeSortHelper(auxilaryArray, startIndex, midIndex, mainArray, animations);\n    mergeSortHelper(auxilaryArray, midIndex + 1, endIndex, mainArray, animations);\n    doMerge(mainArray, startIndex, midIndex, endIndex, auxilaryArray, animations);\n\n}\n\nfunction doMerge(mainArray, startIndex, midIndex, endIndex, auxilaryArray, animations) {\n    let k = startIndex;\n    let i = startIndex;\n    let j = midIndex + 1;\n\n    while(i <= midIndex && j <= endIndex) {\n        animations.push([i,j]);\n        animations.push([i,j]);\n\n        if (auxilaryArray[i] <= auxilaryArray[j]) {\n            animations.push([k, auxilaryArray[i]]);\n            mainArray[k++] = auxilaryArray[j++];\n        }\n    }\n\n    while(i <= midIndex) {\n        animations.push([i,i]);\n        animations.push([i,i]);\n\n        animations.push([k, auxilaryArray[i]]);\n\n        mainArray[k++] = auxilaryArray[i++];\n\n    }\n\n    while(j <= endIndex) {\n        animations.push([i,j]);\n        animations.push([i,j]);\n\n        animations.push([k, auxilaryArray[i]]);\n\n        mainArray[k++] = auxilaryArray[j++];\n    }\n}"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAqC;EACxC,MAAMC,UAAU,GAAG,EAAnB;EACA,IAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;EACvB,MAAMG,MAAM,GAAGH,KAAK,CAACI,KAAN,EAAf;EACAC,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,MAA7B,EAAqCF,UAArC,CAAf;AAEH;;AAED,SAASI,eAAT,CAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,QAAhD,EAA0DC,aAA1D,EAAyER,UAAzE,EAAqF;EACjF,IAAGM,UAAU,KAAKC,QAAlB,EAA4B,OADqD,CAGjF;;EACA,MAAME,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,UAAU,GAACC,QAAZ,IAAwB,CAAnC,CAAjB;EAEAH,eAAe,CAACI,aAAD,EAAgBF,UAAhB,EAA4BG,QAA5B,EAAsCJ,SAAtC,EAAiDL,UAAjD,CAAf;EACAI,eAAe,CAACI,aAAD,EAAgBC,QAAQ,GAAG,CAA3B,EAA8BF,QAA9B,EAAwCF,SAAxC,EAAmDL,UAAnD,CAAf;EACAY,OAAO,CAACP,SAAD,EAAYC,UAAZ,EAAwBG,QAAxB,EAAkCF,QAAlC,EAA4CC,aAA5C,EAA2DR,UAA3D,CAAP;AAEH;;AAED,SAASY,OAAT,CAAiBP,SAAjB,EAA4BC,UAA5B,EAAwCG,QAAxC,EAAkDF,QAAlD,EAA4DC,aAA5D,EAA2ER,UAA3E,EAAuF;EACnF,IAAIa,CAAC,GAAGP,UAAR;EACA,IAAIQ,CAAC,GAAGR,UAAR;EACA,IAAIS,CAAC,GAAGN,QAAQ,GAAG,CAAnB;;EAEA,OAAMK,CAAC,IAAIL,QAAL,IAAiBM,CAAC,IAAIR,QAA5B,EAAsC;IAClCP,UAAU,CAACgB,IAAX,CAAgB,CAACF,CAAD,EAAGC,CAAH,CAAhB;IACAf,UAAU,CAACgB,IAAX,CAAgB,CAACF,CAAD,EAAGC,CAAH,CAAhB;;IAEA,IAAIP,aAAa,CAACM,CAAD,CAAb,IAAoBN,aAAa,CAACO,CAAD,CAArC,EAA0C;MACtCf,UAAU,CAACgB,IAAX,CAAgB,CAACH,CAAD,EAAIL,aAAa,CAACM,CAAD,CAAjB,CAAhB;MACAT,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBL,aAAa,CAACO,CAAC,EAAF,CAA9B;IACH;EACJ;;EAED,OAAMD,CAAC,IAAIL,QAAX,EAAqB;IACjBT,UAAU,CAACgB,IAAX,CAAgB,CAACF,CAAD,EAAGA,CAAH,CAAhB;IACAd,UAAU,CAACgB,IAAX,CAAgB,CAACF,CAAD,EAAGA,CAAH,CAAhB;IAEAd,UAAU,CAACgB,IAAX,CAAgB,CAACH,CAAD,EAAIL,aAAa,CAACM,CAAD,CAAjB,CAAhB;IAEAT,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBL,aAAa,CAACM,CAAC,EAAF,CAA9B;EAEH;;EAED,OAAMC,CAAC,IAAIR,QAAX,EAAqB;IACjBP,UAAU,CAACgB,IAAX,CAAgB,CAACF,CAAD,EAAGC,CAAH,CAAhB;IACAf,UAAU,CAACgB,IAAX,CAAgB,CAACF,CAAD,EAAGC,CAAH,CAAhB;IAEAf,UAAU,CAACgB,IAAX,CAAgB,CAACH,CAAD,EAAIL,aAAa,CAACM,CAAD,CAAjB,CAAhB;IAEAT,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBL,aAAa,CAACO,CAAC,EAAF,CAA9B;EACH;AACJ"},"metadata":{},"sourceType":"module"}